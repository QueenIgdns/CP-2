import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class MotorphApp extends JFrame {
    private JTextField employeeIDField, loginTimeField, logoutTimeField;
    private JTextArea outputArea;
    private Database database;

    public MotorphApp() {  // Renamed the constructor
        // Set up the JFrame
        setTitle("MotorPH Payroll System");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(500, 400);
        setLocationRelativeTo(null); // Center the window
        setLayout(new BorderLayout());

        // Initialize database
        database = new Database();

        // Panel for input fields and buttons
        JPanel inputPanel = new JPanel(new GridLayout(4, 2, 5, 5));
        inputPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Employee ID input
        inputPanel.add(new JLabel("Employee ID:"));
        employeeIDField = new JTextField();
        inputPanel.add(employeeIDField);

        // Login time input
        inputPanel.add(new JLabel("Login Time (HH:mm):"));
        loginTimeField = new JTextField();
        inputPanel.add(loginTimeField);

        // Logout time input
        inputPanel.add(new JLabel("Logout Time (HH:mm):"));
        logoutTimeField = new JTextField();
        inputPanel.add(logoutTimeField);

        // Submit button
        JButton submitButton = new JButton("Submit");
        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                submitButtonClicked();
            }
        });
        inputPanel.add(submitButton);

        // Clear button
        JButton clearButton = new JButton("Clear");
        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearButtonClicked();
            }
        });
        inputPanel.add(clearButton);

        // Input panel to JFrame
        add(inputPanel, BorderLayout.NORTH);

        // Output area
        outputArea = new JTextArea();
        outputArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(outputArea);
        add(scrollPane, BorderLayout.CENTER);
    }

    private void submitButtonClicked() {
        String employeeID = employeeIDField.getText();
        String loginTimeStr = loginTimeField.getText();
        String logoutTimeStr = logoutTimeField.getText();

    
        try {
            Date loginTime = new SimpleDateFormat("HH:mm").parse(loginTimeStr);
            Date logoutTime = new SimpleDateFormat("HH:mm").parse(logoutTimeStr);
            // Perform calculations...
            outputArea.setText("Results will be displayed here...");
        } catch (ParseException ex) {
            outputArea.setText("Invalid time format. Please enter time in HH:mm format.");
        }
    }

    private void clearButtonClicked() {
        employeeIDField.setText("");
        loginTimeField.setText("");
        logoutTimeField.setText("");
        outputArea.setText("");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new MotorphApp().setVisible(true);  // Updated the class name here
            }
        });
    }
}

Milestone Calculator

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MilestoneCalculator extends JFrame {

    private JTextField m1Field;
    private JTextField m2Field;
    private JTextField taField;
    private JLabel resultLabel;

    public MilestoneCalculator() {
        // Setting up the frame
        setTitle("Milestone Calculator");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Milestone 1
        gbc.gridx = 0;
        gbc.gridy = 0;
        add(new JLabel("Milestone 1 (Max 25 points):"), gbc);
        m1Field = new JTextField(10);
        gbc.gridx = 1;
        add(m1Field, gbc);

        // Milestone 2
        gbc.gridx = 0;
        gbc.gridy = 1;
        add(new JLabel("Milestone 2 (Max 40 points):"), gbc);
        m2Field = new JTextField(10);
        gbc.gridx = 1;
        add(m2Field, gbc);

        // Terminal Assessment
        gbc.gridx = 0;
        gbc.gridy = 2;
        add(new JLabel("Terminal Assessment (Max 35 points):"), gbc);
        taField = new JTextField(10);
        gbc.gridx = 1;
        add(taField, gbc);

        // Calculate button
        JButton calculateButton = new JButton("Calculate");
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        add(calculateButton, gbc);
        
        // Result label
        resultLabel = new JLabel("");
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(10, 0, 0, 0);
        add(resultLabel, gbc);

        // Action listener for the calculate button
        calculateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                calculate();
            }
        });
    }

    private void calculate() {
        try {
            double m1 = validateInput(m1Field.getText(), 25);
            double m2 = validateInput(m2Field.getText(), 40);
            double ta = validateInput(taField.getText(), 35);

            double total = m1 + m2 + ta;
            resultLabel.setText("Total Grade: " + total);
        } catch (NumberFormatException e) {
            showError(e.getMessage());
        }
    }

    private double validateInput(String value, int maxPoints) throws NumberFormatException {
        try {
            double val = Double.parseDouble(value);
            if (val < 0 || val > maxPoints) {
                throw new NumberFormatException("Value must be between 0 and " + maxPoints);
            }
            return val;
        } catch (NumberFormatException e) {
            throw new NumberFormatException("Invalid input: " + value + ". Please enter a number between 0 and " + maxPoints);
        }
    }

    private void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Input Error", JOptionPane.ERROR_MESSAGE);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MilestoneCalculator().setVisible(true);
            }
        });
    }
}


