package javafundamentals;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class MotorPH {

    public static void main(String[] args) {
        Database database = new Database();

        // Adding employees to the database
        for (int i = 0; i < employeeIDs.length; i++) {
            try {
                Employee employee = new Employee(employeeIDs[i], lastNames[i], firstNames[i],
                        new SimpleDateFormat("MM/dd/yyyy").parse(birthDates[i]), addresses[i],
                        phoneNumbers[i], positions[i], basicSalaries[i], hourlyRates[i],
                        tinNumbers[i], pagIbigNumbers[i], sssNumbers[i], philhealthNumbers[i]);
                database.addEmployee(employee);
            } catch (ParseException e) {
                System.out.println("Error parsing date for employee: " + e.getMessage());
            } catch (ArrayIndexOutOfBoundsException e) {
                System.out.println("Array index out of bounds: " + e.getMessage());
            }
        }

        Scanner scanner = new Scanner(System.in);
        boolean continueComputation = true;

        while (continueComputation) {
            try {
                System.out.print("Enter employee ID: ");
                String employeeID = scanner.nextLine();

                Employee employee = database.getEmployeeById(employeeID);

                if (employee == null) {
                    System.out.println("Employee ID not found. Please enter a valid employee ID.");
                    continue;
                }

                System.out.println("\nEmployee Details:");
                System.out.println("ID: " + employee.getEmployeeId());
                System.out.println("Last Name: " + employee.getLastName());
                System.out.println("First Name: " + employee.getFirstName());
                System.out.println("Birth Date: " + new SimpleDateFormat("MM/dd/yyyy").format(employee.getBirthDate()));
                System.out.println("Address: " + employee.getAddress());
                System.out.println("Phone Number: " + employee.getPhoneNumber());
                System.out.println("Position: " + employee.getPosition());
                System.out.println("Basic Salary: " + employee.getBasicSalary());
                System.out.println("Hourly Rate: " + employee.getHourlyRate());
                System.out.println("TIN Number: " + employee.getTinNumber());
                System.out.println("Pag-IBIG Number: " + employee.getPagIbigNumber());
                System.out.println("SSS Number: " + employee.getSssNumber());
                System.out.println("PhilHealth Number: " + employee.getPhilhealthNumber());

                // Prompt for login and logout times
                System.out.print("Enter login time (ex. 08:00): ");
                String loginTimeStr = scanner.nextLine();

                System.out.print("Enter logout time (ex. 17:00): ");
                String logoutTimeStr = scanner.nextLine();

                // Calculate duration between login and logout times
                SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm");
                Date loginTime = dateFormat.parse(loginTimeStr);
                Date logoutTime = dateFormat.parse(logoutTimeStr);

                long durationMillis = logoutTime.getTime() - loginTime.getTime();
                double hoursWorked = durationMillis / (1000 * 60 * 60.0);

                // Subtract 1 hour for lunch break
                hoursWorked -= 1.0;

                // Calculate monthly salary based on hours worked
                double monthlySalary = employee.calculateMonthlySalary(hoursWorked);

                // Calculate deductions
                double philhealthDeduction = employee.calculatePhilHealthDeduction(monthlySalary);
                double sssContribution = employee.calculateSSSContribution(monthlySalary);
                double pagIbigContribution = employee.calculatePagIbigContribution(monthlySalary);
                double withholdingTaxDeduction = employee.calculateWithholdingTaxDeduction(monthlySalary);

                // Display deduction breakdown
                displayDeductionBreakdown(philhealthDeduction, sssContribution, pagIbigContribution, withholdingTaxDeduction);

                // Calculate total deductions and net salary
                double totalDeductions = philhealthDeduction + sssContribution + pagIbigContribution + withholdingTaxDeduction;
                double netSalary = monthlySalary - totalDeductions;

                // Display total deductions and net salary
                System.out.printf("Total Deductions: ₱%.2f\n", totalDeductions);
                System.out.printf("Net Salary: ₱%.2f\n", netSalary);

                System.out.print("Do you want to make another computation? (yes/no): ");
                String input = scanner.nextLine().trim().toLowerCase();
                continueComputation = input.equals("yes");
            } catch (NumberFormatException e) {
                System.out.println("Invalid employee ID. Please enter a valid employee ID.");
            } catch (ParseException e) {
                System.out.println("Invalid time format. Please enter the time in HH:mm format.");
            }
        }
        scanner.close();
    }

    private static void displayDeductionBreakdown(double philhealthDeduction, double sssContribution,
                                                   double pagIbigContribution, double withholdingTaxDeduction) {
        System.out.println("\nDeduction Breakdown:");
        System.out.printf("PhilHealth Deduction: ₱%.2f\n", philhealthDeduction);
        System.out.printf("SSS Contribution: ₱%.2f\n", sssContribution);
        System.out.printf("Pag-IBIG Contribution: ₱%.2f\n", pagIbigContribution);
        System.out.printf("Withholding Tax Deduction: ₱%.2f\n", withholdingTaxDeduction);
    }

    // Employee data
    private static String[] employeeIDs = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
            "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
            "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
            "31", "32", "33", "34"};
    private static String[] lastNames = {"Doe", "Smith", "Johnson", "Garcia", "Lim", "Aquino", "Reyes",
            "Hernandez", "Villanueva", "San Jose", "Romualdez", "Atienza",
            "Alvaro", "Salcedo", "Lopez", "Farala", "Martinez", "Romualdez",
            "Mata", "De Leon", "San Jose", "Rosario", "Bautista", "Lazaro",
            "Delos Santos", "Santos", "Del Rosario", "Tolentino", "Gutierrez",
            "Manalaysay", "Villegas", "Ramos", "Maceda", "Aguilar", "Castro",
            "Martinez", "Santos"};
    private static String[] firstNames = {"John", "Emily", "Michael", "Manuel III", "Antonio", "Bianca Sofia",
            "Isabella", "Eduard", "Andrea Mae", "Brad", "Alice", "Rosie",
            "Roderick", "Anthony", "Josie", "Martha", "Leila", "Fredrick",
            "Christian", "Selena", "Allison", "Cydney", "Mark", "Darlene",
            "Kolby", "Vella", "Tomas", "Jacklyn", "Percival", "Garfield",
            "Lizeth", "Carol", "Emelia", "Delia", "John Rafael", "Carlos Ian",
            "Beatriz"};
    private static String[] birthDates = {"10/11/1983", "06/19/1988", "08/04/1989", "06/16/1994", "09/23/1989",
            "02/14/1988", "03/15/1996", "05/14/1992", "09/24/1948", "03/30/1988",
            "09/14/1993", "01/14/1987", "01/11/1942", "07/11/1970", "03/10/1985",
            "10/21/1987", "02/20/1975", "06/24/1986", "10/06/1996", "02/12/1991",
            "11/25/1985", "02/26/1980", "12/31/1983", "12/18/1978", "05/19/1984",
            "12/18/1970", "08/28/1986", "12/12/1981", "08/20/1978", "04/14/1973",
            "01/27/1989", "02/09/1992", "11/16/1990", "08/07/1990"};
    private static String[] addresses = {"Valero Carpark Building Valero Street 1227, Makati City",
            "San Antonio De Padua 2, Block 1 Lot 8 and 2, Dasmarinas, Cavite",
            "Rm. 402 4/F Jiao Building Timog Avenue Cor. Quezon Avenue 1100, Quezon City",
            "460 Solanda Street Intramuros 1000, Manila",
            "National Highway, Gingoog,  Misamis Occidental",
            "17/85 Stracke Via Suite 042, Poblacion, Las Piñas 4783 Dinagat Islands",
            "99 Strosin Hills, Poblacion, Bislig 5340 Tawi-Tawi",
            "12A/33 Upton Isle Apt. 420, Roxas City 1814 Surigao del Norte",
            "90A Dibbert Terrace Apt. 190, San Lorenzo 6056 Davao del Norte",
            "#284 T. Morato corner, Scout Rallos Street, Quezon City",
            "93/54 Shanahan Alley Apt. 183, Santo Tomas 1572 Masbate",
            "49 Springs Apt. 266, Poblacion, Taguig 3200 Occidental Mindoro"};
    private static String[] phoneNumbers = {"966-860-270", "171-867-411", "966-889-370", "786-868-477", "088-861-012",
            "918-621-603", "797-009-261", "983-606-799", "266-036-427", "053-381-386",
            "070-766-300", "478-355-427", "329-034-366", "877-110-749", "023-079-009",
            "783-776-744", "975-432-139", "179-075-129", "868-819-912", "683-725-348"};
    private static String[] positions = {"Chief Executive Officer", "Chief Operating Officer", "Chief Finance Officer",
            "Chief Marketing Officer", "IT Operations and Systems", "HR Manager",
            "HR Team Leader", "HR Rank and File", "HR Rank and File", "Accounting Head",
            "Payroll Manager", "Payroll Team Leader", "Payroll Rank and File",
            "Payroll Rank and File", "Account Manager", "Account Team Leader",
            "Account Team Leader", "Account Rank and File", "Account Rank and File",
            "Account Rank and File", "Account Rank and File", "Account Rank and File",
            "Account Rank and File", "Account Rank and File", "Account Rank and File",
            "Account Rank and File", "Account Rank and File", "Account Rank and File",
            "Account Rank and File", "Account Rank and File", "Account Rank and File",
            "Account Rank and File", "Account Rank and File", "Account Rank and File",
            "Account Rank and File", "Sales & Marketing", "Supply Chain and Logistics",
            "Customer Service and Relations"};
    private static int[] basicSalaries = {150000, 120000, 130000, 110000, 85000, 60000, 45000, 25000,
            25000, 95000, 65000, 45000, 25000, 25000, 85000, 55000, 55000,
            25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000,
            25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000,
            25000, 25000, 25000, 25000};
    private static int[] hourlyRates = {0, 0, 0, 0, 50, 45, 35, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    private static String[] tinNumbers = {"123456789", "234567890", "345678901", "456789012", "567890123",
            "678901234", "789012345", "890123456", "901234567", "012345678",
            "135790246", "246801357", "357901468", "468012579", "579023680",
            "680134791", "791245802", "802356913", "913467024", "024578135",
            "890123456", "901234567", "012345678", "123456789", "234567890",
            "345678901", "456789012", "567890123", "678901234", "789012345",
            "890123456", "901234567", "012345678", "123456789", "234567890",
            "345678901", "456789012", "567890123", "678901234"};
    private static String[] pagIbigNumbers = {"123-456-789-012", "234-567-890-123", "345-678-901-234", "456-789-012-345",
            "567-890-123-456", "678-901-234-567", "789-012-345-678", "890-123-456-789",
            "901-234-567-890", "012-345-678-901", "135-790-246-801", "246-801-357-902",
            "357-902-468-013", "468-013-579-024", "579-024-680-135", "680-135-791-246",
            "791-246-802-357", "802-357-913-468", "913-468-024-578", "024-578-135-890",
            "890-123-456-789", "901-234-567-890", "012-345-678-901", "123-456-789-012",
            "234-567-890-123", "345-678-901-234", "456-789-012-345", "567-890-123-456",
            "678-901-234-567", "789-012-345-678", "890-123-456-789", "901-234-567-890",
            "012-345-678-901", "123-456-789-012", "234-567-890-123", "345-678-901-234",
            "456-789-012-345", "567-890-123-456", "678-901-234-567"};
    private static String[] sssNumbers = {"01-2345678-9", "12-3456789-0", "23-4567890-1", "34-5678901-2",
            "45-6789012-3", "56-7890123-4", "67-8901234-5", "78-9012345-6",
            "89-0123456-7", "90-1234567-8", "13-5790246-9", "24-6801357-0",
            "35-7912468-1", "46-8023579-2", "57-9134680-3", "68-0245781-4",
            "79-1357892-5", "80-2468903-6", "91-3579014-7", "02-4680125-8",
            "01-2345678-9", "12-3456789-0", "23-4567890-1", "34-5678901-2",
            "45-6789012-3", "56-7890123-4", "67-8901234-5", "78-9012345-6",
            "89-0123456-7", "90-1234567-8", "13-5790246-9", "24-6801357-0",
            "35-7912468-1", "46-8023579-2", "57-9134680-3", "68-0245781-4",
            "79-1357892-5", "80-2468903-6"};
    private static String[] philhealthNumbers = {"12-345678901-12", "23-456789012-23", "34-567890123-34",
            "45-678901234-45", "56-789012345-56", "67-890123456-67",
            "78-901234567-78", "89-012345678-89", "90-123456789-90",
            "01-234567890-01", "13-579024680-13", "24-680135791-24",
            "35-791246802-35", "46-802357913-46", "57-913468024-57",
            "68-024578135-68", "79-135679246-79", "80-246890357-80",
            "91-357901468-91", "02-468012579-02", "12-345678901-12",
            "23-456789012-23", "34-567890123-34", "45-678901234-45",
            "56-789012345-56", "67-890123456-67", "78-901234567-78",
            "89-012345678-89", "90-123456789-90", "01-234567890-01",
            "13-579024680-13", "24-680135791-24", "35-791246802-35",
            "46-802357913-46", "57-913468024-57", "68-024578135-68",
            "79-135679246-79", "80-246890357-80"};
}

class Database {
    private Map<String, Employee> employeeMap;

    public Database() {
        this.employeeMap = new HashMap<>();
    }

    public void addEmployee(Employee employee) {
        employeeMap.put(employee.getEmployeeId(), employee);
    }

    public Employee getEmployeeById(String employeeId) {
        return employeeMap.get(employeeId);
    }
}

class Employee {
    private String employeeId;
    private String lastName;
    private String firstName;
    private Date birthDate;
    private String address;
    private String phoneNumber;
    private String position;
    private int basicSalary;
    private int hourlyRate;
    private String tinNumber;
    private String pagIbigNumber;
    private String sssNumber;
    private String philhealthNumber;

    public Employee(String employeeId, String lastName, String firstName, Date birthDate,
                    String address, String phoneNumber, String position, int basicSalary,
                    int hourlyRate, String tinNumber, String pagIbigNumber,
                    String sssNumber, String philhealthNumber) {
        this.employeeId = employeeId;
        this.lastName = lastName;
        this.firstName = firstName;
        this.birthDate = birthDate;
        this.address = address;
        this.phoneNumber = phoneNumber;
        this.position = position;
        this.basicSalary = basicSalary;
        this.hourlyRate = hourlyRate;
        this.tinNumber = tinNumber;
        this.pagIbigNumber = pagIbigNumber;
        this.sssNumber = sssNumber;
        this.philhealthNumber = philhealthNumber;
    }

    // Getters
    public String getEmployeeId() {
        return employeeId;
    }

    public String getLastName() {
        return lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public Date getBirthDate() {
        return birthDate;
    }

    public String getAddress() {
        return address;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public String getPosition() {
        return position;
    }

    public int getBasicSalary() {
        return basicSalary;
    }

    public int getHourlyRate() {
        return hourlyRate;
    }

    public String getTinNumber() {
        return tinNumber;
    }

    public String getPagIbigNumber() {
        return pagIbigNumber;
    }

    public String getSssNumber() {
        return sssNumber;
    }

    public String getPhilhealthNumber() {
        return philhealthNumber;
    }

    // Methods for calculating deductions and contributions
    public double calculateMonthlySalary(double hoursWorked) {
        if (hourlyRate == 0) {
            return basicSalary;
        } else {
            return hourlyRate * hoursWorked;
        }
    }

    public double calculatePhilHealthDeduction(double monthlySalary) {
        // Perform calculation here
        return monthlySalary * 0.02;
    }

    public double calculateSSSContribution(double monthlySalary) {
        // Perform calculation here
        return monthlySalary * 0.03;
    }

    public double calculatePagIbigContribution(double monthlySalary) {
        // Perform calculation here
        return monthlySalary * 0.01;
    }

    public double calculateWithholdingTaxDeduction(double monthlySalary) {
        // Perform calculation here
        return monthlySalary * 0.05;
    }
}
